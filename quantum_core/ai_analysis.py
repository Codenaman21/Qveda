# quantum_core/ai_analysis.py

import os
import google.generativeai as genai
import re
import json

# Configure Gemini once
genai.configure(api_key=os.getenv("GEMINI_API_KEY"))


def _try_extract_json(ai_text: str):
    """
    Try to extract a JSON block from the AI response.
    Handles both ```json fenced blocks and plain { ... } blocks.
    """
    # 1. Look for fenced ```json blocks
    match = re.search(r"```(?:json)?\s*(\{.*?\})\s*```", ai_text, re.DOTALL)
    if match:
        return match.group(1)

    # 2. Otherwise, look for the first { ... } block
    match = re.search(r"(\{.*\})", ai_text, re.DOTALL)
    if match:
        return match.group(1)

    return None


def generate_ai_analysis(qubits, gates, qasm_result, statevector_result, entanglement_result):
    """
    Generate AI-powered analysis of the quantum circuit using Gemini.
    """
    prompt = f"""
    You are a quantum computing expert. Analyze this quantum circuit.

    - Qubits: {qubits}
    - Gates: {gates}
    - QASM Result: {qasm_result}
    - Statevector Result: {statevector_result}
    - Entanglement Metrics: {entanglement_result}

    Provide a structured, concise and crisp JSON-like response the response of summary and insights should not be more than 100 words like 100-100 both:
    {{
        "summary": str,
        "details": [list of str],
        "detected_pattern": str,
        "confidence": float (0â€“1),
        "complexity_class": str,
        "applications": [list of str],
        "insights": [{{"title": str, "text": str}}]
    }}
    """

    try:
        model = genai.GenerativeModel("gemini-2.5-flash")
        response = model.generate_content(prompt)

        # Raw AI text output
        ai_text = response.text.strip()

        # Try extracting JSON
        extracted = _try_extract_json(ai_text)
        if extracted:
            try:
                return json.loads(extracted)
            except Exception:
                pass  # fall back if parsing fails

        # Fallback: wrap whatever came back
        return {
            "summary": ai_text,
            "details": ["Generated by Qveda"],
            "detected_pattern": "Unknown",
            "confidence": 0.7,
            "complexity_class": "BQP",
            "applications": [],
            "insights": [{"title": "AI Insight", "text": ai_text}],
        }

    except Exception as e:
        return {
            "summary": "AI analysis failed.",
            "details": [str(e)],
            "detected_pattern": "N/A",
            "confidence": 0.0,
            "complexity_class": "N/A",
            "applications": [],
            "insights": [],
        }
